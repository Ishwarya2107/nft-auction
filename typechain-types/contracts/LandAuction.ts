/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface LandAuctionInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "auctions"
      | "bid"
      | "createAuction"
      | "endAuction"
      | "getAuctionByIndex"
      | "getAuctionCount"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "auctions",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "bid",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createAuction",
    values: [AddressLike, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "endAuction",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getAuctionByIndex",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getAuctionCount",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(functionFragment: "auctions", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "bid", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "createAuction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "endAuction", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getAuctionByIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAuctionCount",
    data: BytesLike
  ): Result;
}

export interface LandAuction extends BaseContract {
  connect(runner?: ContractRunner | null): LandAuction;
  waitForDeployment(): Promise<this>;

  interface: LandAuctionInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  auctions: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [
      [string, bigint, bigint, string, bigint, boolean] & {
        seller: string;
        minBid: bigint;
        highestBid: bigint;
        highestBidder: string;
        endTime: bigint;
        ended: boolean;
      }
    ],
    "view"
  >;

  bid: TypedContractMethod<
    [_nft: AddressLike, _tokenId: BigNumberish],
    [void],
    "payable"
  >;

  createAuction: TypedContractMethod<
    [
      _nft: AddressLike,
      _tokenId: BigNumberish,
      _minBid: BigNumberish,
      _duration: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  endAuction: TypedContractMethod<
    [_nft: AddressLike, _tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;

  getAuctionByIndex: TypedContractMethod<
    [_nft: AddressLike, index: BigNumberish],
    [
      [bigint, string, bigint, bigint, string, bigint, boolean] & {
        tokenId: bigint;
        seller: string;
        minBid: bigint;
        highestBid: bigint;
        highestBidder: string;
        endTime: bigint;
        ended: boolean;
      }
    ],
    "view"
  >;

  getAuctionCount: TypedContractMethod<[_nft: AddressLike], [bigint], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "auctions"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [
      [string, bigint, bigint, string, bigint, boolean] & {
        seller: string;
        minBid: bigint;
        highestBid: bigint;
        highestBidder: string;
        endTime: bigint;
        ended: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "bid"
  ): TypedContractMethod<
    [_nft: AddressLike, _tokenId: BigNumberish],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "createAuction"
  ): TypedContractMethod<
    [
      _nft: AddressLike,
      _tokenId: BigNumberish,
      _minBid: BigNumberish,
      _duration: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "endAuction"
  ): TypedContractMethod<
    [_nft: AddressLike, _tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getAuctionByIndex"
  ): TypedContractMethod<
    [_nft: AddressLike, index: BigNumberish],
    [
      [bigint, string, bigint, bigint, string, bigint, boolean] & {
        tokenId: bigint;
        seller: string;
        minBid: bigint;
        highestBid: bigint;
        highestBidder: string;
        endTime: bigint;
        ended: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getAuctionCount"
  ): TypedContractMethod<[_nft: AddressLike], [bigint], "view">;

  filters: {};
}
